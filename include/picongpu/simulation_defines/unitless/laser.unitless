/* Copyright 2013-2017 Axel Huebl, Anton Helm, Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include <pmacc/static_assert.hpp>


namespace picongpu
{
    namespace laserPulseFrontTilt
    {
        //normed laser parameter
        constexpr float_X WAVE_LENGTH = float_X (SI::WAVE_LENGTH_SI / UNIT_LENGTH); //unit: meter
        constexpr float_X PULSE_LENGTH = float_X (SI::PULSE_LENGTH_SI / UNIT_TIME); //unit: seconds (1 sigma)
        constexpr float_X AMPLITUDE = float_X (SI::AMPLITUDE_SI / UNIT_EFIELD); //unit: Volt /meter
        constexpr float_X W0 = float_X(SI::W0_SI / UNIT_LENGTH); // unit: meter
        constexpr float_X FOCUS_POS = float_X(SI::FOCUS_POS_SI / UNIT_LENGTH); //unit: meter
        constexpr float_X INIT_TIME = float_X ((PULSE_INIT*SI::PULSE_LENGTH_SI) / UNIT_TIME); // unit: seconds (full inizialisation length)
        constexpr float_X TILT_X = float_X (( SI::TILT_X_SI * PI ) / 180); // unit: raidiant (in dimensions of pi)
    }

    namespace laserGaussianBeam
    {
        //normed laser parameter
        constexpr float_X WAVE_LENGTH = float_X (SI::WAVE_LENGTH_SI / UNIT_LENGTH); //unit: meter
        constexpr float_X PULSE_LENGTH = float_X (SI::PULSE_LENGTH_SI / UNIT_TIME); //unit: seconds (1 sigma)
        constexpr float_X AMPLITUDE = float_X (SI::AMPLITUDE_SI / UNIT_EFIELD); //unit: Volt /meter
        constexpr float_X W0 = float_X(SI::W0_SI / UNIT_LENGTH); // unit: meter
        constexpr float_X FOCUS_POS = float_X(SI::FOCUS_POS_SI / UNIT_LENGTH); //unit: meter
        constexpr float_X INIT_TIME = float_X ((PULSE_INIT*SI::PULSE_LENGTH_SI) / UNIT_TIME); // unit: seconds (full inizialisation length)
    }

    namespace laserPlaneWave
    {
        //normed laser parameter
        constexpr float_X WAVE_LENGTH = float_X (SI::WAVE_LENGTH_SI / UNIT_LENGTH); //unit: meter
        constexpr float_X PULSE_LENGTH = float_X (SI::PULSE_LENGTH_SI / UNIT_TIME); //unit: seconds (1 sigma)
        constexpr float_X LASER_NOFOCUS_CONSTANT = float_X (SI::LASER_NOFOCUS_CONSTANT_SI / UNIT_TIME); //unit: seconds
        constexpr float_X AMPLITUDE = float_X (SI::AMPLITUDE_SI / UNIT_EFIELD); //unit: Volt /meter
        constexpr float_X INIT_TIME = float_X ((RAMP_INIT*SI::PULSE_LENGTH_SI + SI::LASER_NOFOCUS_CONSTANT_SI) / UNIT_TIME); // unit: seconds (full inizialisation length)
    }

    namespace laserWavepacket
    {
        //normed laser parameter
        constexpr float_X WAVE_LENGTH = float_X (SI::WAVE_LENGTH_SI / UNIT_LENGTH); //unit: meter
        constexpr float_X PULSE_LENGTH = float_X (SI::PULSE_LENGTH_SI / UNIT_TIME); //unit: seconds (1 sigma)
        constexpr float_X LASER_NOFOCUS_CONSTANT = float_X (SI::LASER_NOFOCUS_CONSTANT_SI / UNIT_TIME); //unit: seconds
        constexpr float_X AMPLITUDE = float_X (SI::AMPLITUDE_SI / UNIT_EFIELD); //unit: Volt /meter
        constexpr float_X W0_X = float_X(SI::W0_X_SI / UNIT_LENGTH); // unit: meter
        constexpr float_X W0_Z = float_X(SI::W0_Z_SI / UNIT_LENGTH); // unit: meter
        constexpr float_X INIT_TIME = float_X ((RAMP_INIT*SI::PULSE_LENGTH_SI + SI::LASER_NOFOCUS_CONSTANT_SI) / UNIT_TIME); // unit: seconds (full inizialisation length)
    }

    namespace laserPolynom
    {
        //normed laser parameter
        constexpr float_X WAVE_LENGTH = float_X (SI::WAVE_LENGTH_SI / UNIT_LENGTH); //unit: meter
        constexpr float_X PULSE_LENGTH = float_X (SI::PULSE_LENGTH_SI / UNIT_TIME); //unit: seconds
        constexpr float_X AMPLITUDE = float_X (SI::AMPLITUDE_SI / UNIT_EFIELD); //unit: Volt /meter
        constexpr float_X W0x = float_X(SI::W0x_SI / UNIT_LENGTH); // unit: meter
        constexpr float_X W0z = float_X(SI::W0z_SI / UNIT_LENGTH); // unit: meter
        constexpr float_X INIT_TIME = float_X (SI::PULSE_LENGTH_SI / UNIT_TIME); // unit: seconds (full inizialisation length)
    }

    namespace laserNone
    {
        //normed laser parameter
        constexpr float_X WAVE_LENGTH = float_X (SI::WAVE_LENGTH_SI / UNIT_LENGTH); //unit: meter
        constexpr float_X PULSE_LENGTH = float_X (SI::PULSE_LENGTH_SI / UNIT_TIME); //unit: seconds (1 sigma)
        constexpr float_X AMPLITUDE = float_X (SI::AMPLITUDE_SI / UNIT_EFIELD); //unit: Volt /meter
        constexpr float_X INIT_TIME = 0.0; //no inizialisation of laser
    }

    namespace laserExpRampWithPrepulse
    {
        //normed laser parameter
        constexpr float_X WAVE_LENGTH = float_X (SI::WAVE_LENGTH_SI / UNIT_LENGTH); //unit: meter
        constexpr float_X PULSE_LENGTH = float_X (SI::PULSE_LENGTH_SI / UNIT_TIME); //unit: seconds (1 sigma)
        constexpr float_X LASER_NOFOCUS_CONSTANT = float_X (SI::LASER_NOFOCUS_CONSTANT_SI / UNIT_TIME); //unit: seconds
        constexpr float_X AMPLITUDE = float_X (SI::AMPLITUDE_SI / UNIT_EFIELD); //unit: Volt /meter
        constexpr float_X W0_X = float_X(SI::W0_X_SI / UNIT_LENGTH); // unit: meter
        constexpr float_X W0_Z = float_X(SI::W0_Z_SI / UNIT_LENGTH); // unit: meter

        constexpr float_64 TIME_PREPULSE = float_64 (SI::TIME_PREPULSE_SI / UNIT_TIME);
        constexpr float_64 TIME_PEAKPULSE = float_64 (SI::TIME_PEAKPULSE_SI / UNIT_TIME);
        constexpr float_64 TIME_1 = float_64 (SI::TIME_POINT_1_SI / UNIT_TIME);
        constexpr float_64 TIME_2 = float_64 (SI::TIME_POINT_2_SI / UNIT_TIME);
        constexpr float_64 TIME_3 = float_64 (SI::TIME_POINT_3_SI / UNIT_TIME);
        constexpr float_X endUpramp = TIME_PEAKPULSE -
            0.5 * LASER_NOFOCUS_CONSTANT;
        constexpr float_X startDownramp = TIME_PEAKPULSE +
            0.5 * LASER_NOFOCUS_CONSTANT;

        constexpr float_X INIT_TIME = float_X ((TIME_PEAKPULSE + RAMP_INIT * PULSE_LENGTH) / UNIT_TIME);

        const float_X AMP_PREPULSE = float_X (math::sqrt(INT_RATIO_PREPULSE) * AMPLITUDE);
        const float_X AMP_1 = float_X (math::sqrt(INT_RATIO_POINT_1) * AMPLITUDE);
        const float_X AMP_2 = float_X (math::sqrt(INT_RATIO_POINT_2) * AMPLITUDE);
        const float_X AMP_3 = float_X (math::sqrt(INT_RATIO_POINT_3) * AMPLITUDE);

        // compile-time checks for physical sanity:
        static_assert(
            ( TIME_1 < TIME_2 ) && ( TIME_2 < TIME_3 ) && ( TIME_3 < endUpramp ),
            "The times in the parameters TIME_POINT_1/2/3 and the beginning of the plateau (which is at TIME_PEAKPULSE - 0.5*RAMP_INIT*PULSE_LENGTH) should be in ascending order"
        );
        // some prerequisites for check of intensities (approximate check, because I can't use exp and log)
        constexpr float ratio_dt = ( endUpramp - TIME_3 ) / ( TIME_3 - TIME_2 ); // ratio of time intervals
        constexpr float ri1 = INT_RATIO_POINT_3 / INT_RATIO_POINT_2; // first intensity ratio
        constexpr float ri2 = 0.2 / INT_RATIO_POINT_3; // secont intensity ratio (0.2 is an arbitrary upper border for the intensity of the exp ramp)
        /* Approximate check, if ri1 ^ ratio_dt > ri2. That would mean, that the exponential curve through (time2, int2) and (time3, int3) lies above (endUpramp, 0.2)
         * the power function is emulated by "rounding" the exponent to a rational number and expanding both sides by the common denominator, to get integer powers, see below
         * for this, the range for ratio_dt is split into parts; the checked condition is "rounded down", i.e. it's weaker in every point of those ranges except one.
         */
        constexpr bool intensity_too_big =
            ( ratio_dt >= 3.   && ri1 * ri1 * ri1 > ri2) ||
            ( ratio_dt >= 2.   && ri1 * ri1 > ri2) ||
            ( ratio_dt >= 1.5  && ri1 * ri1 * ri1 > ri2 * ri2) ||
            ( ratio_dt >= 1.   && ri1 > ri2) ||
            ( ratio_dt >= 0.8  && ri1 * ri1 * ri1 * ri1 > ri2 * ri2 * ri2 * ri2 * ri2 ) ||
            ( ratio_dt >= 0.75 && ri1 * ri1 * ri1 > ri2 * ri2 * ri2 * ri2 ) ||
            ( ratio_dt >= 0.67 && ri1 * ri1 > ri2 * ri2 * ri2 ) ||
            ( ratio_dt >= 0.6  && ri1 * ri1 * ri1 > ri2 * ri2 * ri2 * ri2 * ri2 ) ||
            ( ratio_dt >= 0.5  && ri1 > ri2 * ri2 ) ||
            ( ratio_dt >= 0.4  && ri1 * ri1 > ri2 * ri2 * ri2 * ri2 * ri2 ) ||
            ( ratio_dt >= 0.33 && ri1 > ri2 * ri2 * ri2 ) ||
            ( ratio_dt >= 0.25 && ri1 > ri2 * ri2 * ri2 * ri2 ) ||
            ( ratio_dt >= 0.2  && ri1 > ri2 * ri2 * ri2 * ri2 * ri2 );
        static_assert( 
            !intensity_too_big,
            "The intensities of the ramp are very large - the extrapolation to the time of the main pulse would give more than half of the pulse amplitude. This is not a Gaussian pulse at all anymore - probably some of the parameters are different from what you think!?"
        );
    }

}

    /* include implemented laser profiles */
#include "picongpu/fields/laserProfiles/laserExpRampWithPrepulse.hpp"
#include "picongpu/fields/laserProfiles/laserPulseFrontTilt.hpp"
#include "picongpu/fields/laserProfiles/laserGaussianBeam.hpp"
#include "picongpu/fields/laserProfiles/laserWavepacket.hpp"
#include "picongpu/fields/laserProfiles/laserPlaneWave.hpp"
#include "picongpu/fields/laserProfiles/laserPolynom.hpp"
#include "picongpu/fields/laserProfiles/laserNone.hpp"
